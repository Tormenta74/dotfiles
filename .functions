##
## my custom functions
##

# just checks a directory/file's size every 2 seconds
# useful for monitoring big downloads or cp/mv operations

monitor () {
    if [[ $# == 0 ]]; then
        watch -n 2 ls -lah
    else 
        watch -n 2 ls -lah $1
    fi
}

# idiot-proof version of mv: checks that you have the rights to perform
# the operation before you start doing it

idiot_mv () {
    if [[ $# -le 1 ]]; then
        mv $@    # let mv tell you what you did wrong
    else
        # we want the owner of the destination directory, not the destination file (cuz it may not even exist yet and even then it don't matter, mv will ask you before rewriting)
        owner_dst_dir="me"
        [[ ! -f $2 ]] && owner_dst_dir=$(stat -c "%U" $2)
        [[ -f $2 ]] && owner_dst_dir=$(echo "$2" | rev | cut -d/ -f2- | rev | stat -c "%U" -) 
        me=$(whoami)
        if [[ me != owner_dst_dir ]]; then
            echo -e "cannot move \'$1\' to  \'$2\': you are not the owner of the destination directory"
        else
            mv --verbose $@
        fi
    fi
}


# makes dated archives of directories passed as arguments

backup () {
    fecha=$(date +%Y-%m-%d-%H%M%S)
    if [[ $# == 0 ]]; then
        echo 'usage: backup directory1 [directory2 directory3 ...]'
        return 1
    else 
        for i;
        do [[ -a $i ]] && tar zcfv $i.$fecha.tar.gz $i;
        done
    fi
}

# related to backup: move selected files (only files) to the archive folder

#TODO: when asked to create the archive directory, if the path is already a directory, warn and exit
#TODO: 
store () {
    yesno=""
    archivename=""
    if [[ $# == 0 ]]; then
        echo 'usage: store file1 [file2 file3 ...]'
        return 1
    elif [[ -d $ARCHIVE ]]; then
        echo -en "Could not find standard archive directory. Would you like to create it? (yN): "
        read yesno
        case $yesno in
            y|Y) \
                echo -en "Specify the full path for the archive directory: (default=$HOME/Archive)";
                read archivename;
                if [[ $archivename == "" ]]; then
                    export $ARCHIVE "$HOME/Archive"
                    mkdir -p $ARCHIVE
                fi
                
        esac
    else 
        for i;
        do [[ -f $i ]] && mv $i $HOME/Archive;
        done
    fi
}


# default: starts a git repo for a classic Garrido Warriors style C-project
# options: create an HTML/CSS/JS project ( -html )
# options: create a C++ project ( -cpp | -c++ )
# options: create a Java project ( -java )

start () {
    if [[ -d .git ]]; then
        echo 'Error: this is already a git repository. Use this in an empty directory.'
        return 1
    else
        if [[ $(ls -A) ]]; then
            echo 'Error: there are files in this directory. Use this in an empty directory.'
            return 2
        else
            git init
            echo 'Git repository intitialized. Remember to add the remote address.'
            if [[ $# == 0 || $1 == "-c" ]]; then
                mkdir -p bin doc includes lib/lobj obj src srclib
                echo "# $USER - $(date +%Y-%m-%d)" >> Makefile
                [[ -a $HOME/Templates/Makefile ]] && cat $HOME/Templates/Makefile >> Makefile
                [[ -a $HOME/Templates/c.gitignore ]] && cp $HOME/Templates/c.gitignore .gitignore

            else
                if [[ $1 == "-html" ]]; then
                    mkdir -p css files/images files/json files/videos js
                    echo -e "<!-- $USER - $(date +%Y-%m-%d) -->\n" >> index.html
                    [[ -a $HOME/Templates/index.html ]] && cat $HOME/Templates/index.html >> index.html
                    [[ -a $HOME/Templates/styles.css ]] && cp $HOME/Templates/styles.css .
                elif [[ $1 == "-cpp" || $1 == "-c++" ]]; then
                    mkdir -p bin doc includes lib/lobj obj src srclib
                    echo "# $USER - $(date +%Y-%m-%d)" >> Makefile
                    [[ -a $HOME/Templates/Makefile.cpp ]] && cat $HOME/Templates/Makefile.cpp >> Makefile   # special cpp Makefile
                    [[ -a $HOME/Templates/c.gitignore ]] && cp $HOME/Templates/c.gitignore .gitignore
                elif [[ $1 == "-java" ]]; then
                    mkdir -p bin doc out src
                    echo -e "<!-- $USER - $(date +%Y-%m-%d) -->\n" >> pom.xml
                    [[ -a $HOME/Templates/pom.xml ]] && cat $HOME/Templates/pom.xml >> pom.xml
                    [[ -a $HOME/Templates/java.gitignore ]] && cp $HOME/Templates/java.gitignore .gitignore
                fi
            fi
        fi
        gaa
    fi
}

#
## This didn't work:
# alias eclimd="bash -c \"$ECLIPSE_HOME/eclimd &> $ECLIM_LOGS/eclim.$(date +%Y-%m-%d-%H%M%S).log\""
#
## So I tried this:
#

eclimd () {
    fecha=$(date +%Y-%m-%d-%H%M%S)
    bash -c "$ECLIPSE_HOME/eclimd &> $ECLIM_LOGS/eclim.$(date +%Y-%m-%d-%H%M%S).log"
}

# useful for java developement
# run in the project root to try to add a pom

mavenize () {
    if [[ -f $HOME/Templates/pom.xml ]]; then
        cp $HOME/Templates/pom.xml .
    else
        echo -e "No POM template found at $HOME/Templates"
        return 1
    fi
}

# restarts a given program and detaches from the shell

restart () {
    if [[ $# == 0 ]]; then
        echo -e "No program name given"
    else
        pkill $1
        nohup $1 > /dev/null &
    fi
}

isrunning () {
    if [[ $# == 0 ]]; then
        echo -e "No program name given"
    else
        ps -eo euser,pid,%cpu,%mem,cputime,args | head -n1
        ps -eo euser,pid,%cpu,%mem,cputime,args | grep $1 -i | grep -v "grep"
    fi
}
